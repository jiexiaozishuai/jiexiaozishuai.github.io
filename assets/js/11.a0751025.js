(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{158:function(e,t,i){"use strict";i.r(t);var l=i(0),o=Object(l.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"对于mvvm的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对于mvvm的理解"}},[this._v("#")]),this._v(" 对于MVVM的理解")]),this._v(" "),t("p",[this._v("MVVM 是 Model-View-ViewModel 的缩写。\nModel代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。\nView 代表UI 组件，它负责将数据模型转化成UI 展现出来。\nViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。\n在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。\nViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。")])])}),[],!1,null,null,null);t.default=o.exports}}]);